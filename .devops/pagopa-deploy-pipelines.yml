parameters:
  - name: SEMVER
    displayName: "When packing a release, define the version bump to apply"
    type: string
    values:
      - major
      - minor
      - patch
      - skip
    default: patch
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prod
      - test # test: deploy on develop with H2
  - name: MS_NAME
    displayName: "Microservice to deploy"
    type: string
    values:
      - reporting-fdr
    default: reporting-fdr

variables:
  ${{ if eq(parameters['ENV'], 'dev') }}:
    AZURE_SUBSCRIPTION: $(DEV_AZURE_SUBSCRIPTION)
    RESOURCE_GROUP: $(DEV_WEB_APP_RESOURCE_GROUP_NAME)
    APP_NAME: $(DEV_WEB_APP_NAME)
    STAGE: "d"
    dockerRegistryServiceConnection: $(DEV_CONTAINER_REGISTRY)
    dockerNamespace: $(DEV_CONTAINER_NAMESPACE)
  ${{ if eq(parameters['ENV'], 'uat') }}:
    AZURE_SUBSCRIPTION: $(UAT_AZURE_SUBSCRIPTION)
    RESOURCE_GROUP: $(UAT_WEB_APP_RESOURCE_GROUP_NAME)
    APP_NAME: $(UAT_WEB_APP_NAME)
    STAGE: "u"
    dockerRegistryServiceConnection: $(UAT_CONTAINER_REGISTRY)
    dockerNamespace: $(UAT_CONTAINER_NAMESPACE)
  ${{ if eq(parameters['ENV'], 'prod') }}:
    AZURE_SUBSCRIPTION: $(PROD_AZURE_SUBSCRIPTION)
    RESOURCE_GROUP: $(PROD_WEB_APP_RESOURCE_GROUP_NAME)
    APP_NAME: $(PROD_WEB_APP_NAME)
    STAGE: "p"
    dockerRegistryServiceConnection: $(PROD_CONTAINER_REGISTRY)
    dockerNamespace: $(PROD_CONTAINER_NAMESPACE)
  ${{ if eq(parameters['ENV'], 'test') }}:
    AZURE_SUBSCRIPTION: $(DEV_AZURE_SUBSCRIPTION)
    RESOURCE_GROUP: $(DEV_WEB_APP_RESOURCE_GROUP_NAME)
    APP_NAME: $(DEV_WEB_APP_NAME)
    STAGE: "t"
    dockerRegistryServiceConnection: $(DEV_CONTAINER_REGISTRY)
    dockerNamespace: $(DEV_CONTAINER_NAMESPACE)

  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: "-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)"
  title: ""
  sha: ""
  tag: ""
  IMAGE_REPOSITORY : "reporting-fdr"

# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: ubuntu-latest

stages:
  # Create a release on GitHub
  - stage: release_service
    # bump version on main branch and if SEMVER is not 'skip'
    condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne('${{ parameters.SEMVER }}', 'skip'))
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: releaseService
        steps:
          - checkout: self
            clean: true
            persistCredentials: true

          - script: |
              git config --global user.name "$(GIT_USERNAME)"
              git config --global user.email "$(GIT_EMAIL)"

          - template: azure-templates/maven-versioning.yml
            parameters:
              subproject: "${{ parameters.MS_NAME }}"
              semver: "${{ parameters.SEMVER }}"

          - task: Bash@3
            name: pomversion
            inputs:
              targetType: "inline"
              script: |
                version=$(mvn -f ${{ parameters.MS_NAME }}/pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
                echo "##vso[task.setvariable variable=next;isOutput=true]$version"
              failOnStderr: true

          - script: |
              git checkout ${{variables['Build.SourceBranchName']}}

          - script: |
              git add ${{ parameters.MS_NAME }}/pom.xml
              git commit -m "Bump version [skip ci]"
              git push origin ${{variables['Build.SourceBranchName']}}


          - script: |
              HEAD_SHA=$(git rev-parse HEAD)
              TAG="$(pomversion.next)"
              TITLE="Release $(pomversion.next)"
              echo "##vso[task.setvariable variable=title]$TITLE"
              echo "##vso[task.setvariable variable=sha]$HEAD_SHA"
              echo "##vso[task.setvariable variable=tag]$TAG"

          - script: |
              echo $(tag)
              echo $(title)
              echo $(sha)


          # create new release
          - task: GitHubRelease@0
            inputs:
              gitHubConnection: $(GITHUB_CONNECTION)
              repositoryName: $(Build.Repository.Name)
              action: create
              target: $(sha)
              tagSource: manual
              tag: $(tag)
              title: $(title)
              addChangelog: true

  # Deploy on Azure
  - stage: deploy
    condition: not(failed('releaseService'))
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: deployJava
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
            submodules: true

          - script: |
              git checkout ${{variables['Build.SourceBranchName']}}

#          - task: Bash@3
#            name: application_properties
#            inputs:
#              targetType: "inline"
#              script: |
#                cp src/main/resources/application-azure-$(STAGE).properties src/main/resources/application.properties
#                cat src/main/resources/application.properties
#              failOnStderr: true

          - task: Cache@2
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
            displayName: Set Maven Cache

          - task: Bash@3
            name: pomversion
            inputs:
              targetType: "inline"
              script: |
                version=$(mvn -f ${{ parameters.MS_NAME }}/pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
                echo "##vso[task.setvariable variable=next;isOutput=true]$version"
              failOnStderr: true

          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              publishJUnitResults: false
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false

          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(IMAGE_REPOSITORY)'
              command: 'buildAndPush'
              Dockerfile: "./${{ parameters.MS_NAME }}/Dockerfile.deploy"
              tags: |
                $(Build.BuildId)
                latest
                $(pomversion.next)

          - task: AzureFunctionAppContainer@1
            displayName: Azure Function Service Deploy
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              appName: "$(APP_NAME)"
              imageName: "$(dockerNamespace)/$(IMAGE_REPOSITORY):$(pomversion.next)"
              resourceGroupName: $(RESOURCE_GROUP)
              slotName: production
